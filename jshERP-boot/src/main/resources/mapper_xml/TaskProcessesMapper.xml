<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.jsh.erp.datasource.mappers.TaskProcessesMapper">
  <resultMap id="BaseResultMap" type="com.jsh.erp.datasource.entities.TaskProcesses">
    <id column="id" jdbcType="VARCHAR" property="id" />
    <result column="task_id" jdbcType="BIGINT" property="taskId" />
    <result column="bill_no" jdbcType="VARCHAR" property="billNo" />
    <result column="bar_code" jdbcType="VARCHAR" property="barCode" />
    <result column="user_id" jdbcType="BIGINT" property="userId" />
    <result column="parent_processes" jdbcType="BIGINT" property="parentProcesses" />
    <result column="before_processes" jdbcType="VARCHAR" property="beforeProcesses" />
    <result column="processes_name" jdbcType="VARCHAR" property="processesName" />
    <result column="over_time" jdbcType="TIMESTAMP" property="overTime" />
    <result column="plan_over_time" jdbcType="TIMESTAMP" property="planOverTime" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="status" jdbcType="VARCHAR" property="status" />
    <result column="template" jdbcType="VARCHAR" property="template" />
    <result column="creator" jdbcType="BIGINT" property="creator" />
    <result column="remark" jdbcType="VARCHAR" property="remark" />
    <result column="tenant_id" jdbcType="BIGINT" property="tenantId" />
  </resultMap>


  <resultMap id="BaseTaskMap" type="com.jsh.erp.datasource.entities.TaskProcesses" extends="BaseResultMap">
    <association property="parentProcessesEntity" javaType="com.jsh.erp.datasource.entities.TaskProcesses"
                 column="parent_processes"
                 select="com.jsh.erp.datasource.mappers.TaskProcessesMapper.selectById" ></association>
    <association property="task" javaType="com.jsh.erp.datasource.entities.TaskEx"
                 column="task_id"
                 select="com.jsh.erp.datasource.mappers.TaskMapperEx.selectExById" >
    </association>
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, task_id, user_id, parent_processes, before_processes, processes_name, create_time, over_time, plan_over_time, creator, template, status, remark
  </sql>
    <select id="searchTaskProcesses" resultType="com.jsh.erp.datasource.entities.TaskProcessesEX" resultMap="BaseTaskMap">
      select * from task_processes
        where 1= 1
      <if test="taskProcesses.taskId != null">
        and task_id = #{taskProcesses.taskId,jdbcType=BIGINT}
      </if>
      <if test="taskProcesses.creator != null">
        and creator = #{taskProcesses.creator,jdbcType=BIGINT}
      </if>
      <if test="taskProcesses.template != null">
        and template = #{taskProcesses.template,jdbcType=VARCHAR}
      </if>
      <if test="taskProcesses.template == null">
        and template != 1
      </if>
      <if test="taskProcesses.barCode != null">
        and bar_code = #{taskProcesses.barCode,jdbcType=VARCHAR}
      </if>
      <if test="taskProcesses.status != null">
        and status = #{taskProcesses.status,jdbcType=VARCHAR}
      </if>
      <if test="taskProcesses.searchKey != null">
        <bind name="bindName" value="'%'+taskProcesses.searchKey+'%'"/>
        and (
        processes_name like #{bindName}
        or remark like #{bindName}
        )
      </if>
    </select>
    <select id="getTaskPostponeList" resultType="java.util.Map">
      SELECT
      ju.username,
      cun.postponeNumber ,
      tot.total
      FROM
      (
      SELECT
      count(*) AS postponeNumber,
      user_id
      FROM
      task_processes
      WHERE
      ((
      over_time IS NULL
      AND plan_over_time&lt;now()
      )
      OR ( over_time IS NOT NULL AND plan_over_time &lt; over_time))
      GROUP BY
      user_id
      ) cun
      left JOIN  jsh_user ju ON cun.user_id = ju.id
      left JOIN  (SELECT
      count(*) AS total,
      user_id
      FROM
      task_processes GROUP BY user_id ) tot on tot.user_id =  cun.user_id
      ORDER BY
      cun.postponeNumber/tot.total limit 5
    </select>


</mapper>
